import EmbedCode from "./EmbedCode";
import EmbedCTA from "./EmbedCTA";
import StyleCalculator from "./StyleCalculator";
import ButtonGroup from "../../Elements/ButtonGroup";
import generateFontFamilies from "./helpers/generateFontFamilies";
import qDom from "../../../utils/qDom";
import isObj from "../../../utils/isObj";

function ImportFonts(store) {

  const importFonts = document.createElement('div');
  importFonts.id = "import";
  
  /* html */
  importFonts.innerHTML = `
    <h2 class="sr-only">Import Fonts</h2>
    <div class="grid-xl">
      <div class="stack-xl">
        <div data-element="primary-embed">
          <!-- Primary Embed -->
        </div>
        <div data-element="secondary-embed">
          <!-- Secondary Embed -->
        </div>
      </div>
      <div class="stack" data-element="import-code">
        <!-- Import Code -->
      </div>
    </div>
  `;


  // Queries / Appends

  const codeContainer = qDom(importFonts, "import-code");
  codeContainer.appendChild(StyleCalculator());

  const primaryEmbed = qDom(importFonts, "primary-embed");
  const secondaryEmbed = qDom(importFonts, "secondary-embed");
  const controlContainer = qDom(importFonts, "import-controls");


  controlContainer.appendChild(ButtonGroup({
    action: updateFormat,
    label: "Format",
    options: ["Variables", "Classes"],
    value: store.getData().codeFormat
  }));

  controlContainer.appendChild(ButtonGroup({
    action: updateUnits,
    label: "Units",
    options: ["REM", "PX"],
    value: store.getData().codeUnits
  }));


  // Functions
  
  function updateImport() {

    const primaryFont = store.getData().primaryFont;
    const secondaryFont = store.getData().secondaryFont;

    if(primaryFont.label !== primaryEmbed.dataset.label) {
      updateEmbed(primaryFont, primaryEmbed);
    }

    if(secondaryFont.label !== secondaryEmbed.dataset.label) {
      updateEmbed(secondaryFont, secondaryEmbed);
    }

    updateCode(primaryFont, secondaryFont);


    function updateEmbed(font, element) {
      if(isObj(font)) {
        element.innerHTML = '';

        if(store.getData().embedLicence.includes(font.distribution)) {
          element.appendChild(EmbedCode(font));
        } else {
          const affiliate = store.getData().affiliateLicence.includes(font.distribution);
          element.appendChild(EmbedCTA(font, affiliate));
        }

        element.dataset.label = font.label;
      }
    }


    function updateCode(primaryFont, secondaryFont) {
      
      const format = store.getData().codeFormat;

      let codeArray = [];

      codeArray = [...codeArray, ...generateFontFamilies({
        primary: primaryFont, 
        secondary: secondaryFont, 
        format: format,
        titleSize: store.getData().testTitleSize,
        textSize: store.getData().testTextSize,
        units: store.getData().codeUnits
      })];
      codeArray.push("");

      if(format === "Variables") {
        codeArray.unshift("");
        codeArray.unshift(":root {");
        codeArray.push("}");
      }

      codeArray.unshift("");
      codeArray.unshift("/* CSS Generated by x-heightable */");

      codeContainer.querySelector('code').textContent = codeArray.join('\n');

    }
  
  }

  store.subscribe(updateImport);


  function updateFormat(value) {
    store.setData({
      codeFormat: value
    });
  }


  function updateUnits(value) {
    store.setData({
      codeUnits: value
    });
  }


  // Return

  return importFonts;

}

export default ImportFonts;