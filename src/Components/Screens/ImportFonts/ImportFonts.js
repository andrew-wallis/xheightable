import ImportGoogle from "./ImportGoogle";
import ImportAdobe from "./ImportAdobe";
import ImportCode from "./ImportCode";
import Button from "../../Elements/Button";
import Checkbox from "../../Elements/Checkbox";
import generateFontFamilies from "./helpers/generateFontFamilies";
import qu from "../../../utils/qu";
import qua from "../../../utils/qua";

function ImportFonts(store) {

  const importFonts = document.createElement('div');
  importFonts.id = "import";
  importFonts.style.display = "none";
  importFonts.dataset.section = "Import";
  importFonts.dataset.element = "section";
  
  /* html */
  importFonts.innerHTML = `
    <div class="stack">
      <div class="stack-l">
        <div class="stack-xs">
          <h2 class="slub">Embed Code</h2>
          <hr/>
        </div>
        <div class="grid-l columns-1-2">
          <div data-element="primary-embed">
            <!-- Primary Embed -->
          </div>
          <div data-element="secondary-embed">
            <!-- Secondary Embed -->
          </div>
        </div>
      </div>
      <div class="insulate stack" data-element="import-code">
        <!-- Import Code -->
      </div>
    </div>
  `;


  // Appends


  const codeContainer = qu(importFonts, "import-code");
  codeContainer.appendChild(ImportCode());

  const controlContainer = qu(importFonts, "import-controls");

  controlContainer.appendChild(Checkbox({label: "Include cap height adjusts", action: toggleCapAdjusts, value: store.getData().capAdjusts}));
  controlContainer.appendChild(Checkbox({label: "Include line heights", action: toggleLineHeights, value: store.getData().lineHeights}));

  qu(importFonts, "Variables", "tab").appendChild(Button({label: "Variables", type: "slub", action: changeTab}));
  qu(importFonts, "Classes", "tab").appendChild(Button({label: "Classes", type: "slub", action: changeTab}));


  // Queries

  const primaryEmbed = qu(importFonts, "primary-embed");
  const secondaryEmbed = qu(importFonts, "secondary-embed");
  const tabs = qu(importFonts, "tabs");


  // Functions
  
  function updateImport() {

    const primaryFont = store.getData().primaryFont;
    const secondaryFont = store.getData().secondaryFont;

    if(primaryFont.label !== primaryEmbed.dataset.label) {
      updateEmbed(primaryFont, primaryEmbed);
    }

    if(secondaryFont.label !== secondaryEmbed.dataset.label) {
      updateEmbed(secondaryFont, secondaryEmbed);
    }

    updateCode(primaryFont, secondaryFont);


    function updateEmbed(font, element) {
      if(Object.keys(font).length > 0) {
        element.innerHTML = '';

        if(font.distribution === "Google") {
          element.appendChild(ImportGoogle(font));
        } else {
          element.appendChild(ImportAdobe(font));
        }

        element.dataset.label = font.label;
      }
    }

    function updateCode(primaryFont, secondaryFont) {
      
      const format = store.getData().codeTab;

      let codeArray = [];

      codeArray = [...codeArray, ...generateFontFamilies(primaryFont, secondaryFont, format, store.getData().capAdjusts, store.getData().lineHeights)];
      codeArray.push("");

      if(format === "Variables") {
        codeArray.unshift("");
        codeArray.unshift(":root {");
        codeArray.push("}");
      }

      codeArray.unshift("");
      codeArray.unshift("/* CSS Generated by x-heightable */");

      codeContainer.querySelector('code').textContent = codeArray.join('\n');

    }
  
  }

  store.subscribe(updateImport);


  function changeTab(tab) {
    store.setData({codeTab: tab});

    qua(tabs, "tab").forEach((thisTab) => {
      thisTab.classList.remove("active");
      if(thisTab.dataset.tab === tab) {
        thisTab.classList.add("active");
      }
    });

    qua(tabs, "slub").forEach((thisButton) => {
      thisButton.classList.remove("active");
      if(thisButton.dataset.target === tab) {
        thisButton.classList.add("active");
      }
    });
  }

  changeTab("Variables");


  function toggleCapAdjusts(bool) {
    store.setData({capAdjusts: bool});
  }

  toggleCapAdjusts(store.getData().capAdjusts);


  function toggleLineHeights(bool) {
    store.setData({lineHeights: bool});
  }

  toggleLineHeights(store.getData().lineHeights);


  // Return

  return importFonts;

}

export default ImportFonts;