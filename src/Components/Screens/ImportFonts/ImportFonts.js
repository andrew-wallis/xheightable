import Branding from "../../Elements/Branding";
import Navigation from "../../Global/Navigation";
import ImportGoogle from "./ImportGoogle";
import ImportAdobe from "./ImportAdobe";
import ImportCode from "./ImportCode";
import Button from "../../Elements/Button";
import Checkbox from "../../Elements/Checkbox";
import generateFontFamilies from "./helpers/generateFontFamilies";

function ImportFonts(store) {

  const importFonts = document.createElement('div');
  importFonts.id = "import";
  importFonts.className = "screen";
  importFonts.style.display = "none";
  importFonts.dataset.screen = "Import";
  importFonts.dataset.element = "screen";
  
  /* html */
  importFonts.innerHTML = `
    <header data-element="import-header">
      <div data-element="top-bar">
        <!-- ImportFonts Topbar -->
      </div>
    </header>
    <main>
      <div class="wrap insulate stack embed-wrapper" data-element="import-embed">
        <!-- Import Embed -->
      </div>
      <div class="wrap insulate stack" data-element="import-code">
        <!-- Import Code -->
      </div>
    </main>
  `;

  // Page Layout

  const topBar = importFonts.querySelector('[data-element="top-bar"]');
  topBar.appendChild(Branding());
  topBar.appendChild(Navigation());

  const primaryEmbed = document.createElement('div');
  primaryEmbed.dataset.element = "data-details";
  const secondaryEmbed = document.createElement('div');
  secondaryEmbed.dataset.element = "data-details";
  const code = ImportCode();

  const divider = document.createElement('hr');

  const embedContainer = importFonts.querySelector('[data-element="import-embed"]');
  embedContainer.appendChild(primaryEmbed);
  embedContainer.appendChild(divider);
  embedContainer.appendChild(secondaryEmbed);

  const codeContainer = importFonts.querySelector('[data-element="import-code"]');
  codeContainer.appendChild(code);


  // Tabs

  const tabs = importFonts.querySelector('[data-element="import-tabs"]');
  const variables = document.createElement('li');
  variables.appendChild(Button({label: "Variables", type: "tab", action: changeTab}));
  tabs.appendChild(variables);
  const classes = document.createElement('li');
  classes.appendChild(Button({label: "Classes", type: "tab", action: changeTab}));
  tabs.appendChild(classes);


  // Controls

  const controlContainer = importFonts.querySelector('[data-element="import-controls"]');
  controlContainer.appendChild(Checkbox({label: "Include cap height adjusts", action: toggleCapAdjusts, value: store.getData().capAdjusts}));
  controlContainer.appendChild(Checkbox({label: "Include line heights", action: toggleLineHeights, value: store.getData().lineHeights}));


  // Functions
  
  function updateImport() {

    const primaryFont = store.getData().primaryFont;
    const secondaryFont = store.getData().secondaryFont;


    if(primaryFont.label !== primaryEmbed.dataset.label) {
      updateEmbed(primaryFont, primaryEmbed);
    }

    if(secondaryFont.label !== secondaryEmbed.dataset.label) {
      updateEmbed(secondaryFont, secondaryEmbed);
    }

    updateCode(primaryFont, secondaryFont);

    function updateEmbed(font, element) {

      if(Object.keys(font).length > 0) {

        element.innerHTML = '';

        if(font.distribution === "Google") {
          element.appendChild(ImportGoogle(font));
        } else {
          element.appendChild(ImportAdobe(font));
        }

        element.dataset.label = font.label;
      }
    }

    function updateCode(primaryFont, secondaryFont) {

      const code = codeContainer.querySelector('code');

      const format = store.getData().codeTab;

      let codeArray = [];

      codeArray = [...codeArray, ...generateFontFamilies(primaryFont, secondaryFont, format, store.getData().capAdjusts, store.getData().lineHeights)];
      codeArray.push("");

      if(format === "Variables") {
        codeArray.unshift("");
        codeArray.unshift(":root {");
        codeArray.push("}");
      }

      codeArray.unshift("");
      codeArray.unshift("/* CSS Generated by x-heightable */");

      code.textContent = codeArray.join('\n');

    }
  
  }

  store.subscribe(updateImport);


  function changeTab(tab) {
    store.setData({codeTab: tab})

    const getTabs = tabs.querySelectorAll('[data-element="tab"]');

    getTabs.forEach((thisTab) => {
      thisTab.classList.remove("active");
      if(thisTab.dataset.target === tab) {
        thisTab.classList.add("active");
      }
    });
  }

  changeTab("Variables");


  function toggleCapAdjusts(bool) {
    store.setData({capAdjusts: bool});
  }

  toggleCapAdjusts(store.getData().capAdjusts);

  function toggleLineHeights(bool) {
    store.setData({lineHeights: bool});
  }

  toggleLineHeights(store.getData().lineHeights);

  return importFonts;

}

export default ImportFonts;